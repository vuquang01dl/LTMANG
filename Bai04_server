#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024
#define LOG_FILE "log.txt"

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    char buffer[BUFFER_SIZE];

    // Tạo socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Không thể tạo socket");
        exit(EXIT_FAILURE);
    }

    // Thiết lập địa chỉ server
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Gắn địa chỉ vào socket
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Không thể gắn địa chỉ vào socket");
        exit(EXIT_FAILURE);
    }

    // Lắng nghe kết nối
    if (listen(server_socket, 5) < 0) {
        perror("Không thể lắng nghe kết nối");
        exit(EXIT_FAILURE);
    }

    printf("Đang lắng nghe kết nối từ client...\n");

    socklen_t client_addr_len = sizeof(client_addr);

    // Chấp nhận kết nối từ client
    if ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len)) < 0) {
        perror("Không thể chấp nhận kết nối từ client");
        exit(EXIT_FAILURE);
    }

    printf("Đã kết nối với client.\n");

    // Mở file log
    FILE *log_file = fopen(LOG_FILE, "a");
    if (log_file == NULL) {
        perror("Không thể mở file log");
        exit(EXIT_FAILURE);
    }

    // Nhận dữ liệu từ client và ghi vào file log
    while (1) {
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);
        if (bytes_received <= 0) {
            printf("Đã ngắt kết nối với client.\n");
            break;
        }
        buffer[bytes_received] = '\0';
        printf("Nhận dữ liệu từ client: %s", buffer);
        fprintf(log_file, "%s", buffer);
        fflush(log_file);
    }

    // Đóng file log và đóng kết nối
    fclose(log_file);
    close(client_socket);
    close(server_socket);

    return 0;
}
